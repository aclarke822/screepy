[1mdiff --git a/package.json b/package.json[m
[1mindex d0d024a..69315a9 100644[m
[1m--- a/package.json[m
[1m+++ b/package.json[m
[36m@@ -1,7 +1,7 @@[m
 {[m
   "name": "screepy",[m
   "description": "",[m
[31m-  "version": "3.0.0",[m
[32m+[m[32m  "version": "4.0.0",[m
   "private": true,[m
   "type": "module",[m
   "engines": {[m
[1mdiff --git a/src/main.d.ts b/src/main.d.ts[m
[1mdeleted file mode 100644[m
[1mindex 010ec5e..0000000[m
[1m--- a/src/main.d.ts[m
[1m+++ /dev/null[m
[36m@@ -1,3 +0,0 @@[m
[31m-[m
[31m-[m
[31m-export {};[m
\ No newline at end of file[m
[1mdiff --git a/src/main.ts b/src/main.ts[m
[1mindex eeb3abc..2f2cc84 100644[m
[1m--- a/src/main.ts[m
[1m+++ b/src/main.ts[m
[36m@@ -1,117 +1,10 @@[m
[31m-//screepy 2.0.0[m
[31m-import { ErrorMapper } from "utils/ErrorMapper";[m
[31m-import MyUtilities from "utils/Utilities";[m
[31m-import Harvester from "roles/harvester";[m
[31m-import Builder from "roles/builder";[m
[31m-import Upgrader from "roles/upgrader";[m
[31m-[m
[31m-[m
[31m-declare global {[m
[31m-    const STATE_NEW = "NEW";[m
[31m-    const STATE_SEEKSOURCE = "SEEKSOURCE";[m
[31m-    const STATE_SEEKHOME = "SEEKHOME";[m
[31m-    const STATE_RELOCATE = "RELOCATE";[m
[31m-    const STATE_GATHER = "GATHER";[m
[31m-    const STATE_UNLOAD = "UNLOAD";[m
[31m-[m
[31m-    const INTENT_HARVEST = "HARVEST";[m
[31m-    const INTENT_UPGRADE = "UPGRADE";[m
[31m-    const INTENT_UNLOAD = "DEPOSIT";[m
[31m-[m
[31m-    type CREEP_STATES = Harvester["states"] | Builder["states"] | Upgrader["states"];[m
[31m-    type CREEP_INTENTS = Harvester["intents"] | Builder["intents"] | Upgrader["intents"];[m
[31m-[m
[31m-    interface Memory {[m
[31m-        uuid: number;[m
[31m-        log: unknown;[m
[31m-        creepTypes: [{[m
[31m-            name: string,[m
[31m-            bodyParts: BodyPartDefinition["type"][],[m
[31m-            role: string,[m
[31m-            cost: number[m
[31m-        }];[m
[31m-        isInit: boolean;[m
[31m-    }[m
[31m-[m
[31m-    interface CreepMemory {[m
[31m-        name: string;[m
[31m-        role: string;[m
[31m-        room: string;[m
[31m-        working: boolean;[m
[31m-        state: CREEP_STATES;[m
[31m-        intent: CREEP_INTENTS;[m
[31m-        bodyParts: BodyPartConstant[];[m
[31m-        target: Id<Source> | Id<StructureSpawn>[m
[31m-    }[m
[31m-[m
[31m-[m
[31m-[m
[31m-    interface FlagMemory { [name: string]: unknown }[m
[31m-    interface SpawnMemory { [name: string]: unknown }[m
[31m-    interface RoomMemory { [name: string]: unknown }[m
[31m-[m
[31m-[m
[31m-}[m
[31m-[m
[32m+[m[32m//screepy 4.0.0[m
[32m+[m[32mimport ErrorMapper from "utilities/ErrorMapper";[m
[32m+[m[32mimport Director from "utilities/Director";[m
 [m
 export const loop = ErrorMapper.wrapLoop(() => {[m
[31m-    if (!Memory.isInit) {[m
[31m-        MyUtilities.initialize();[m
[31m-        //console.log("Initialized");[m
[31m-    }[m
[31m-[m
[31m-    Game.notify([m
[31m-        `Current game tick is ${Game.time}`,[m
[31m-        1, // group these notifications for 1 minutes[m
[31m-    );[m
[31m-[m
[31m-    if (Game.spawns["Spawn1"].store[RESOURCE_ENERGY] === 0) {[m
[31m-        Game.notify([m
[31m-            "Spawn1 is out of energy",[m
[31m-            1, // group these notifications for 1 minutes[m
[31m-        );[m
[31m-    }[m
[31m-[m
[31m-    // Automatically delete memory of missing creeps[m
[31m-    Object.keys(Memory.creeps).forEach((name: string) => {[m
[31m-        if (!(name in Game.creeps)) {[m
[31m-            delete Memory.creeps[name];[m
[31m-        }[m
[31m-    });[m
[31m-[m
[31m-    Object.keys(Game.creeps).forEach((creepName: keyof typeof Game.creeps) => {[m
[31m-        const creep = Game.creeps[creepName];[m
[31m-[m
[31m-        switch (creep.memory.role) {[m
[31m-            case 'harvester':[m
[31m-                (creep as Harvester).perform();[m
[31m-                break;[m
[31m-            case 'upgrader':[m
[31m-                (creep as Upgrader).perform();[m
[31m-                break;[m
[31m-            case 'builder':[m
[31m-                (creep as Builder).perform();[m
[31m-                break;[m
[31m-            default:[m
[31m-                console.log('No role found');[m
[31m-[m
[31m-        }[m
[31m-[m
[31m-    });[m
[31m-[m
[31m-    Object.keys(Game.spawns).forEach((spawnName: keyof typeof Game.spawns) => {[m
[31m-        const spawn = Game.spawns[spawnName];[m
[31m-        spawn.spawnCreep(['work', 'move', 'carry'], 'test1', {memory: {[m
[31m-            name: 'harvester',[m
[31m-            bodyParts: [MOVE, WORK, CARRY],[m
[31m-            role: 'harvester',[m
[31m-            state: "NEW",[m
[31m-            intent: "HARVEST",[m
[31m-            room: '',[m
[31m-            working: false,[m
[31m-            target: spawn.room.find(FIND_SOURCES)[0].id as Id<Source>[m
[31m-        } as CreepMemory});[m
[31m-[m
[31m-        //     const creep: Spawning | null = spawn.spawning;[m
[31m-    });[m
[32m+[m[32m    Director.initialize();[m
[32m+[m[32m    Director.cleanse();[m
[32m+[m[32m    Director.maintain();[m
[32m+[m[32m    Director.direct();[m
 });[m
[1mdiff --git a/src/roles/builder.ts b/src/roles/builder.ts[m
[1mindex 65f15c5..778e83d 100644[m
[1m--- a/src/roles/builder.ts[m
[1m+++ b/src/roles/builder.ts[m
[36m@@ -1,52 +1,50 @@[m
[31m-type BUILDER_STATES = typeof STATE_NEW | typeof STATE_SEEKSOURCE | typeof STATE_SEEKHOME | typeof STATE_RELOCATE | typeof STATE_GATHER | typeof STATE_UNLOAD[m
[31m-type BUILDER_INTENTS = typeof INTENT_UPGRADE | typeof INTENT_HARVEST[m
[32m+[m[32mimport Commoner from "roles/Commoner";[m
 [m
[31m-interface Builder extends Creep {[m
[31m-    perform(): void;[m
[31m-    memory: CreepMemory;[m
[32m+[m[32minterface Builder extends Commoner {[m
     bodyParts: BodyPartConstant[];[m
[31m-    states: BUILDER_STATES;[m
[31m-    intents: BUILDER_INTENTS;[m
[32m+[m[32m    states: typeof STATE_NEW | typeof STATE_SEEKSOURCE | typeof STATE_SEEKHOME | typeof STATE_RELOCATE | typeof STATE_GATHER | typeof STATE_UNLOAD;[m
[32m+[m[32m    intents: typeof INTENT_UNLOAD | typeof INTENT_HARVEST;[m
[32m+[m[32m    name: string;[m
[32m+[m[32m    role: "BUILDER" | "BUILDER";[m
[32m+[m[32m    state: Builder["states"];[m
[32m+[m[32m    intent: Builder["intents"];[m
[32m+[m[32m    room: Room;[m
[32m+[m[32m    memory: CreepMemory;[m
[32m+[m[32m    perform(): void;[m
 }[m
 [m
 class Builder implements Builder {[m
[31m-    memory: CreepMemory = {[m
[31m-        name: 'harvester',[m
[31m-        bodyParts: [MOVE, WORK, CARRY],[m
[31m-        role: 'harvester',[m
[31m-        state: STATE_NEW,[m
[31m-        intent: INTENT_HARVEST,[m
[31m-        room: '',[m
[31m-        working: false,[m
[31m-        target: this.findNearestSource().id[m
[31m-    };[m
[31m-[m
[31m-    static states: BUILDER_STATES;[m
[32m+[m[32m    public static role = "BUILDER";[m
[32m+[m[32m    public static bodyParts = [MOVE, WORK, CARRY];[m
[32m+[m[41m    [m
[32m+[m[32m    constructor(creep: Creep) {[m
[32m+[m[32m        this.memory = creep.memory;[m
[32m+[m[32m    }[m
 [m
     perform(): void {[m
[31m-        if (this.memory.working && this.store[RESOURCE_ENERGY] == 0) {[m
[31m-            this.memory.working = false;[m
[31m-            this.say('ðŸ”„ harvest');[m
[31m-        }[m
[31m-        if (!this.memory.working && this.store.getFreeCapacity() == 0) {[m
[31m-            this.memory.working = true;[m
[31m-            this.say('ðŸš§ build');[m
[31m-        }[m
[31m-[m
[31m-        if (this.memory.working) {[m
[31m-            const targets = this.room.find(FIND_CONSTRUCTION_SITES);[m
[31m-            if (targets.length) {[m
[31m-                if (this.build(targets[0]) == ERR_NOT_IN_RANGE) {[m
[31m-                    this.moveTo(targets[0], { visualizeP